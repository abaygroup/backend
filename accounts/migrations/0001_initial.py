# Generated by Django 3.2 on 2021-10-23 08:56

from django.db import migrations, models
import phone_field.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=32, unique=True, verbose_name='имя пользователя')),
                ('email', models.EmailField(max_length=64, unique=True, verbose_name='адрес электронной почты')),
                ('profile_name', models.CharField(blank=True, max_length=64, null=True, verbose_name='Полная имя')),
                ('gender', models.CharField(choices=[('NOT_DEFINED', 'Не указано'), ('MALE', 'Мужской'), ('FAMALE', 'Женский')], default='Не указано', max_length=12, verbose_name='Пол')),
                ('phone', phone_field.models.PhoneField(blank=True, help_text='Контакт телефона', max_length=31, verbose_name='Телефон')),
                ('birthday', models.DateField(blank=True, null=True, verbose_name='Дата рождение')),
                ('is_active', models.BooleanField(default=True, help_text='Это статус активности пользователя.', verbose_name='Статус активность')),
                ('is_staff', models.BooleanField(default=False, help_text='Статус бренда как нашего партнера.', verbose_name='Статус партнера')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Аккаунт',
                'verbose_name_plural': 'Аккаунты',
            },
        ),
    ]
